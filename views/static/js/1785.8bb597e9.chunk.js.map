{"version":3,"file":"static/js/1785.8bb597e9.chunk.js","mappings":"uYAgBIA,EAAaC,EAAQ,MAARA,GA8bjB,MA5bA,SAAsBC,GAGlB,OAA4CC,EAAAA,EAAAA,UAAS,iBAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAyDF,EAAAA,EAAAA,UAAS,IAAlE,eACA,GADA,WACwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KACA,GADA,MACiEH,EAAAA,EAAAA,UAAS,KAA1E,eACA,GADA,WACwDA,EAAAA,EAAAA,UAAS,IAAjE,eACA,GADA,WAC4DA,EAAAA,EAAAA,UAAS,KAArE,eAAOI,EAAP,KAAgCC,EAAhC,KACA,GAA0CL,EAAAA,EAAAA,UAAS,GAAnD,eAAOM,EAAP,KACA,GADA,MAC+DN,EAAAA,EAAAA,UAAS,KAAxE,eACA,GADA,WAC8CA,EAAAA,EAAAA,UAAS,IAAvD,eAAOO,EAAP,KACA,GADA,MACsDP,EAAAA,EAAAA,UAAS,KAA/D,eACA,GADA,WACsDA,EAAAA,EAAAA,UAAS,IAA/D,eAAOQ,EAAP,KACA,GADA,MACkCR,EAAAA,EAAAA,UAAS,KAA3C,eAAOS,EAAP,KAAkBC,EAAlB,KACA,GAA8BV,EAAAA,EAAAA,UAAS,IAAvC,eAAOW,EAAP,KAAgBC,EAAhB,KAEA,GAA8BZ,EAAAA,EAAAA,UAAS,IAAvC,eAAOa,EAAP,KAAgBC,GAAhB,KAqBMC,GAAc,mCAAG,8EAEnBC,MAAMf,GACNe,MAAML,GACNK,MAAMP,GACNQ,IAAAA,IAAUpB,EAAa,kCAAkCI,EAAe,cAAcQ,EAAU,YAAYE,GAASO,MAAK,SAACC,GACvHd,EAAyBc,EAASC,MAElCC,QAAQC,IAAI,sBAAsBH,EAASC,SAC5CG,OAAM,SAACC,GACNH,QAAQC,IAAIE,MAVG,2CAAH,sDAoFpBC,EAAAA,EAAAA,YAAU,cAEP,CAACtB,EAAcG,EAAeC,EAAiBC,IAUlD,IAAMkB,GAAO,mCAAG,6FAGNC,EAAS,CACXC,QAAS,CACL,eAAgB,mBAChB,+BAAgC,gBAChC,iBAAkBC,aAAaC,QAAQ,SACvC,cAAiB,UAAYD,aAAaC,QAAQ,WAR9C,SAYWb,IAAAA,IAAUpB,EAAa,YAAa8B,GAZ/C,OAYRI,EAZQ,OAaZjB,GAAWiB,EAAWX,KAAKA,MAbf,2CAAH,qDAwOb,OAxNAK,EAAAA,EAAAA,YAAU,WACNC,OAED,KAwNC,UAACM,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,UAEI,UAACF,EAAA,EAAD,YAEI,UAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,WACI,kBAAOC,MAAO,CAAEC,aAAc,OAAQC,MAAO,WAA7C,sBACA,SAACC,EAAA,QAAD,CAAYC,UAAU,UAAtB,UACI,SAACD,EAAA,UAAD,CAAcE,KAAK,OAAOC,KAAK,UAAUC,YAAY,WAAWC,MAAOlC,EACnEmC,SAAU,SAACpB,GAAD,OA3VlCd,EA2VyDc,EA3VtCqB,OAAOF,YAC1BtB,QAAQC,IAAIb,YA6VA,UAACwB,EAAA,EAAD,CAAKC,GAAI,EAAT,WACI,kBAAOC,MAAO,CAAEC,aAAc,OAAQC,MAAO,WAA7C,oBACA,SAACC,EAAA,QAAD,CAAYC,UAAU,UAAtB,UACI,SAACD,EAAA,UAAD,CAAcE,KAAK,OAAOC,KAAK,UAAUC,YAAY,WAAWC,MAAOhC,EACnEiC,SAAU,SAACpB,GAAD,OAvWlCZ,EAuWuDY,EAvWtCqB,OAAOF,YACxBtB,QAAQC,IAAIX,YAyWA,SAACsB,EAAA,EAAD,CAAKC,GAAI,KAGT,SAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,UAEI,oBACIY,UAAU,kBACVX,MAAO,CACHY,YAAa,OACbC,WAAY,MACZC,MAAO,MAAOC,OAAQ,QAE1BR,YAAY,SACZC,MAAO1C,EACP2C,SAAU,SAACpB,GAAD,OA9X9BtB,EA8XkDsB,EA9X1BqB,OAAOF,YAC/BtB,QAAQC,IAAIrB,IAoXI,WAWI,qDACCY,EAAQsC,KAAI,SAAC3B,EAAG4B,GACb,OAAO,mBAAkBT,MAAOnB,EAAE6B,GAA3B,SAAiC7B,EAAE8B,UAAtBF,YAIhC,mBAAQG,MAAM,2BAA2BpB,MAAO,CAC5Ce,OAAQ,QACTM,QAAS,kBAAMzC,MAFlB,0BAQR,SAACkB,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,SAACuB,EAAA,EAAD,CAAMC,iBAAiB,WAAWvB,MAAO,CAAEwB,UAAW,QAAtD,UAGI,UAACC,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,kBAA/B,WAKI,kBAAO3B,MAAO,CAAE4B,SAAU,OAAQ3B,aAAc,OAAQC,MAAO,WAA/D,iCALJ,MAK6G,iBAAMF,MAAO,CAAE4B,SAAU,OAAQ1B,MAAO,OAAxC,SAAkDjC,EAAwB4D,UACnL,mBACA,kBAAO7B,MAAO,CAAE4B,SAAU,OAAQ3B,aAAc,OAAQC,MAAO,WAA/D,gCAPJ,MAO4G,iBAAMF,MAAO,CAAE4B,SAAU,OAAQ1B,MAAO,OAAxC,SAAkDjC,EAAwB6D,sBC7apMC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYnE,GAAQ,IAAD,yBACf,cAAMA,IAmBVoE,QAAQ,SAAChE,EAAaG,EAAcC,EAAgBC,GAE/C,EAAK4D,SAAS,CAACjE,aAAcA,EAAaG,cAAcA,EAAcC,gBAAgBA,EAAgBC,oBAAoBA,IACtH,WAAKa,QAAQC,IAAI,QAAQ,EAAK+C,MAAMlE,aAAa,EAAKkE,MAAM/D,cAAc,EAAK+D,MAAM9D,gBAAgB,EAAK8D,MAAM7D,yBArBrH,EAAK6D,MAAQ,CACTC,QAAS,GAAIC,gBAAiB,GAAIC,UAAU,EAAOC,MAAO,GAC1DC,OAAQ,EACRC,QAAS,GACTC,aAAc,GACdC,YAAa,EACb1E,aAAa,EACbG,cAAc,EACdC,gBAAgB,EAChBC,oBAAoB,GAXT,EAsFlB,OAzEA,4EAED,oKAFC,IAED,oBAWA,WACI,OACI,SAAC,IAAD,WACI,SAACwB,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACG,UAAC4C,EAAA,EAAD,YASK,SAACA,EAAA,SAAD,WACI,SAACA,EAAA,QAAD,CAAYC,GAAG,KAAf,6BAEJ,SAACD,EAAA,OAAD,CAAWhC,UAAU,cAArB,UAEG,SAAC,EAAD,CAAgBqB,QAASa,KAAKb,yBAyCxD,EAvFCD,CAA2Be,EAAAA,WA0FjC","sources":["Routes/Statitic/Statistic.provider/Choose.provider.js","Routes/Statitic/Statistic.provider/Statistic.provider.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n//import { PageTitle } from '../../layout-components';\n// import { IconButton, Box, Card, CardContent } from \"@material-ui/core\";\n// import { InputGroup, FormControl, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { Row, Col, Tabs, Tab, Form } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\n// import filterFactory from \"react-bootstrap-table2-filter\";\n// import { CSVLink } from \"react-csv\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\n//import { GetStatisticsDetails } from './services/index';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\n//import TemplatePrint from '../../Template/TemplatePrint'\n//import Aux from \"../../../hoc/_Aux\";\n/* import MessageModal from \"./../../../Components/Alert/Alert\"; */\nvar urlbackend = require(\"../../../env/env\")();\n\nfunction Choosedriver(props) {\n\n\n    const [selectedDriver, setSelectedDriver] = useState(\"Choose Driver\")\n    const [getAnomalyByDriverList, setAnomalyByDriverList] = useState([])\n    const [totalAnomaly, setTotalAnomaly] = useState(0)\n    const [getAnomalyDomianteByDriver, setAnomalyDomianteByDriver] = useState(\"\")\n    const [totalAnomalyDominate, setTotalAnomalyDominate] = useState(0)\n    const [getDeliveryByDriverList, setDeliveryByDriverListt] = useState([])\n    const [totalDelivery, setTotalDelivery] = useState(0)\n    const [getEnlevementByDriverList, setEnlevementByDriverList] = useState([])\n    const [totalEnlevement, setTotalEnlevement] = useState(0)\n    const [getTransfertByDrivert, setTransfertByDriver] = useState([])\n    const [totalAnomalyConsole, setTotalAnomalyConsole] = useState(0)\n    const [startDate, setStartDate] = useState(\"\")\n    const [endDate, setEndDate] = useState(\"\")\n\n    const [drivers, setdrivers] = useState([])\n\n    const changeDriver = (event) => {\n        setSelectedDriver(event.target.value)\n        console.log(selectedDriver);\n\n    }\n\n    const changeEndDate = (event) => {\n        setEndDate(event.target.value)\n        console.log(endDate);\n\n    }\n    const changeStartDate = (event) => {\n        setStartDate(event.target.value)\n        console.log(startDate);\n\n    }\n\n\n\n    const getdatabyriver = async () => {\n\n        alert(selectedDriver)\n        alert(endDate)\n        alert(startDate)\n        axios.get(urlbackend + \"/statistics/provider/pickup?id=\"+selectedDriver+\"&startDate=\"+startDate+\"&endDate=\"+endDate).then((response) => {\n            setDeliveryByDriverListt(response.data)\n          //  setTotalDelivery(response.data.total_delivery)\n            console.log(\"ther is not funtion\",response.data)\n        }).catch((e)=>{\n            console.log(e)\n        })\n\n        // if (list) {\n        //     //setAnomalyByDriverList(list.data)\n        //     list.data.forEach((item, i) => item.id = i + 1);\n        //     setAnomalyByDriverList(list.data)\n        //     setTotalAnomaly(list.total_anomaly)\n        //     //alert(JSON.stringify(getAnomalyByDriverList))\n        //     /* setAnomalyByDriverList(getAnomalyByDriverList) */\n        //     console.log(\"list\", getAnomalyByDriverList)\n        // }\n\n\n\n        // let list1 = [];\n        // //alert(JSON.stringify(list1))\n        // if (list1) {\n        //     setAnomalyDomianteByDriver(list1.dominateAnomaly || \"\")\n\n        //     setTotalAnomalyDominate(list1.totalAnomaly || 0)\n        //     //alert(JSON.stringify(getAnomalyByDriverList))\n        //     //console.log(\"dominateAnomaly\",list1.dominateAnomaly)\n        //     //console.log(\"totalAnomaly\",list1.totalAnomaly)\n        // }\n\n\n        // let list2 = [];\n\n        // if (list2) {\n        //     list2.data.forEach((item, i) => item.id = i + 1)\n        //     setDeliveryByDriverListt(list2.data)\n\n        //     setTotalDelivery(list2.total_delivery)\n        //     //alert(JSON.stringify(getAnomalyByDriverList))\n        //     //console.log(\"listDriver\",list2.data)\n        // }\n\n        // let list3 = [];\n\n        // if (list3) {\n        //     list3.data.forEach((item, i) => item.id = i + 1)\n        //     setEnlevementByDriverList(list3.data)\n        //     setTotalEnlevement(list3.total_enlevement)\n        //     //alert(JSON.stringify(getAnomalyByDriverList))\n        //     //console.log(\"listEnlevement\",list3.data)\n        // }\n\n        // let list4 = [];\n\n        // if (list4) {\n        //     list4.data.forEach((item, i) => item.id = i + 1)\n        //     setTransfertByDriver(list4.data)\n        //     setTotalAnomalyConsole(list4.total_anomaly)\n        //     //alert(JSON.stringify(getAnomalyByDriverList))\n        //     //console.log(\"listDriver\",list4)\n        //     //console.log(\"listDriver1\",list4.total_anomaly)\n\n        // }\n        // props.getData(totalAnomaly, totalDelivery, totalEnlevement, totalAnomalyConsole)\n        // /*  if (list4) {\n        //      setTransfertByDriver(list4.data)\n        //      setTotalAnomalyConsole(list4.total_anomaly)\n        //      //alert(JSON.stringify(getAnomalyByDriverList))\n        //      console.log(\"listDriver\",list4)\n        //      console.log(\"listDriver1\",list4.total_anomaly)\n        //      props.getData(totalAnomaly,totalDelivery,totalEnlevement,totalAnomalyConsole)\n        //  } */\n\n\n    }\n\n\n\n    useEffect(() => {\n        // props.getData(totalAnomaly, totalDelivery, totalEnlevement, totalAnomalyConsole)\n    }, [totalAnomaly, totalDelivery, totalEnlevement, totalAnomalyConsole]);\n\n\n\n\n\n\n\n\n\n    const getdata = async () => {\n\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Headers': 'Authorization',\n                \"x-access-token\": localStorage.getItem('token'),\n                'Authorization': 'Bearer ' + localStorage.getItem('token'),\n            },\n        };\n\n        var getdrivers = await axios.get(urlbackend + \"/provider\", config);\n        setdrivers(getdrivers.data.data)\n\n    }\n    useEffect(() => {\n        getdata()\n        //GetAnomalyByDriverList()\n    }, [])\n\n    const columns3 = [\n        {\n            sort: true,\n            dataField: 'colis.colis.index_colis',\n            text: 'ID',\n        },\n        {\n            sort: true,\n            dataField: 'colis',\n            text: 'Client Name',\n            formatter: (cell, row) => {\n                return `${row.colis.name_complete}`;\n            }\n        },\n        {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Phone Number\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.phone_number}`;\n            }\n\n        }, {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Address\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.address}`;\n            }\n        }, {\n            sort: true,\n            dataField: 'anomaly',\n            text: 'Anomaly Message',\n            formatter: (cell, row) => {\n                return `${row.anomaly.message}`;\n            }\n        }\n    ];\n\n\n    const columns4 = [\n        {\n            sort: true,\n            dataField: 'colis.colis.index_colis',\n            text: 'ID',\n            /* formatter: priceFormatter */\n        }, {\n            sort: true,\n            dataField: 'colis',\n            text: 'Client Name',\n            formatter: (cell, row) => {\n                return `${row.colis.name_complete}`;\n            }\n        },\n        {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Phone Number\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.phone_number}`;\n            }\n            // formatter: this.linkFollow,\n\n        }, {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Address\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.address}`;\n            }\n        }, {\n            sort: true,\n            dataField: 'code',\n            text: 'Code',\n            /* style: { textAlign: \"center\" }, */\n            /*  formatter: (cell, row) => {\n                 return  `${row.anomaly.message}`;\n             } */\n        }\n    ];\n\n\n    const columns5 = [\n        {\n            sort: true,\n            dataField: 'colis.index_colis',\n            text: 'ID',\n            /* formatter: priceFormatter */\n        }, {\n            sort: true,\n            dataField: 'colis',\n            text: 'Client Name',\n            formatter: (cell, row) => {\n                return `${row.colis.name_complete}`;\n            }\n        },\n        {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Phone Number\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.phone_number}`;\n            }\n            // formatter: this.linkFollow,\n\n        }, {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Address\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.address}`;\n            }\n        }, {\n            sort: true,\n            dataField: 'code',\n            text: 'Code',\n            /* style: { textAlign: \"center\" }, */\n            /*  formatter: (cell, row) => {\n                 return  `${row.anomaly.message}`;\n             } */\n        }\n    ];\n\n\n    const columns6 = [\n        {\n            sort: true,\n            dataField: 'colis.colis.index_colis',\n            text: 'ID',\n            /* formatter: priceFormatter */\n        }, {\n            sort: true,\n            dataField: 'colis',\n            text: 'Client Name',\n            formatter: (cell, row) => {\n                return `${row.colis.name_complete}`;\n            }\n        },\n        {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Phone Number\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.phone_number}`;\n            }\n            // formatter: this.linkFollow,\n\n        }, {\n            sort: true,\n            dataField: \"colis\",\n            text: \"Client Address\",\n\n            style: { textAlign: \"center\" },\n\n\n            formatter: (cell, row) => {\n                return `${row.colis.address}`;\n            }\n        }, {\n            sort: true,\n            dataField: 'code',\n            text: 'Code',\n            /* style: { textAlign: \"center\" }, */\n            /*  formatter: (cell, row) => {\n                 return  `${row.anomaly.message}`;\n             } */\n        }\n    ];\n\n\n    const MyExportCSV = (props) => {\n        const handleClick = () => {\n            props.onExport();\n        };\n        return (\n            <div>\n                {/* <label style={{ fontSize: '20px',marginBottom: \"15px\", color: \"#000000\" }}> Total Anomaly :</label>  <text style={{fontSize: '20px',color: \"red\"}}>{totalAnomaly}</text> */}\n                <button className=\"btn btn-primary float-left\" onClick={handleClick}>Export to CSV</button>\n\n            </div>\n        );\n    };\n\n    return (\n        //<Aux>\n\n        <Row>\n            <Col sm={12}>\n                {/* {JSON.stringify(getAnomalyByDriverList)} */}\n                <Row>\n\n                    <Col sm={6}>\n                        <label style={{ marginBottom: \"15px\", color: \"#000000\" }}> From :</label>\n                        <Form.Group controlId=\"duedate\">\n                            <Form.Control type=\"date\" name=\"duedate\" placeholder=\"Due date\" value={startDate}\n                                onChange={(e) => changeStartDate(e)} />\n                        </Form.Group>\n                    </Col>\n                    <Col sm={6}>\n                        <label style={{ marginBottom: \"15px\", color: \"#000000\" }}> to :</label>\n                        <Form.Group controlId=\"duedate\">\n                            <Form.Control type=\"date\" name=\"duedate\" placeholder=\"Due date\" value={endDate}\n                                onChange={(e) => changeEndDate(e)} />\n                        </Form.Group>\n                    </Col>\n                    <Col sm={4}>\n\n                    </Col>\n                    <Col sm={12}>\n\n                        <select\n                            className=\"browser-default\"\n                            style={{\n                                marginRight: \"10px\",\n                                marginLeft: \"5px\",\n                                width: \"90%\", height: \"40px\"\n                            }}\n                            placeholder=\"Driver\"\n                            value={selectedDriver}\n                            onChange={(e) => changeDriver(e)}\n                        >\n                            <option >choisir  fournisseur</option>\n                            {drivers.map((e, key) => {\n                                return <option key={key} value={e.id} >{e.username}</option>;\n                            })}\n                        </select>\n                    </Col>\n                    <button class=\"btn-pill btn btn-primary\" style={{\n                        height: \"40px\"\n                    }} onClick={() => getdatabyriver()}  >\n                        Search\n                    </button>\n                </Row>\n            </Col>\n\n            <Col sm={12}>\n                <Tabs defaultActiveKey=\"contact1\" style={{ marginTop: \"20px\" }}>\n\n                \n                    <Tab eventKey=\"contact1\" title=\"Enlevement list\">\n       \n\n\n\n                        <label style={{ fontSize: '20px', marginBottom: \"15px\", color: \"#000000\" }}> Total Enlevement :</label>  <text style={{ fontSize: '20px', color: \"red\" }}>{getDeliveryByDriverList.pickup}</text>\n                        <br/>\n                        <label style={{ fontSize: '20px', marginBottom: \"15px\", color: \"#000000\" }}> Total Livraiosn :</label>  <text style={{ fontSize: '20px', color: \"red\" }}>{getDeliveryByDriverList.delivery}</text>\n\n\n\n                    </Tab>\n             \n                </Tabs>\n\n            </Col >\n        </Row >\n        // </Aux>\n    );\n\n}\n\nexport default Choosedriver;\n\n","import React from 'react';\nimport {Row, Col, Card} from 'react-bootstrap';\n\nimport Aux from \"../../../hoc/_Aux\";\nimport ChooseProvider from './Choose.provider'\n/* import Choosedriver from './Choose.driver' */\n/*  import LineChart from \"./LineChart\"; */\n// import BarDiscreteChart from \"./BarDiscreteChart\";\n// import BarDiscreteChartLivraison from \"./BarDiscreteChartLivraison\";\n// import BarDiscreteChartZone from \"./BarDiscreteChartZone\";\n// /* import MultiBarChart from \"./MultiBarChart\"; */\n// import PieBasicChart from \"./PieBasicChart\";\n// /* import PieDonutChart from \"./PieDonutChart\"; */\n// import ListPickupAdmin from \"./ListPickupAdmin\";\n/* import DriverStat from \"./DriverStat\";\nimport { GetStatisticsDetails } from '../../services'; */\n\n\nclass Statistic_provider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            getList: [], selectedProduct: '', isloaded: false, limit: 20,\n            offset: 0,\n            perPage: 30,\n            orgtableData: [],\n            currentPage: 0,\n            totalAnomaly:0,\n            totalDelivery:0,\n            totalEnlevement:0,\n            totalAnomalyConsole:0\n        }\n    }\n\n    async componentDidMount() {\n        //this.GetAnomalyByDriverList();\n    }\n\n\n    getData=(totalAnomaly,totalDelivery,totalEnlevement,totalAnomalyConsole)=>{\n\n         this.setState({totalAnomaly: totalAnomaly,totalDelivery:totalDelivery,totalEnlevement:totalEnlevement,totalAnomalyConsole:totalAnomalyConsole}\n            ,()=>{console.log('data2',this.state.totalAnomaly,this.state.totalDelivery,this.state.totalEnlevement,this.state.totalAnomalyConsole)})\n    }\n\n    render() {\n        return (\n            <Aux>\n                <Row>\n                    <Col sm={12}>\n                       <Card>\n                           {/*  <Card.Header>\n                                <Card.Title as=\"h5\">Line Chart2</Card.Title>\n                            </Card.Header>\n                            <Card.Body>\n                                <LineChart/>\n                            </Card.Body> */}\n\n\n                            <Card.Header>\n                                <Card.Title as=\"h5\">Fournisseur </Card.Title>\n                            </Card.Header>\n                            <Card.Body className=\"text-center\">\n                                 {/* <DriverStat/> */}\n                               <ChooseProvider getData={this.getData}/>\n                            </Card.Body>\n                            </Card>\n                    </Col>\n\n                   {/*  <Col md={6}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title as=\"h5\">Donut Chart</Card.Title>\n                            </Card.Header>\n                            <Card.Body className=\"text-center\">\n                                <PieDonutChart/>\n                            </Card.Body>\n                        </Card>\n                    </Col> */}\n                    {/* <Col md={12}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title as=\"h5\">Driver </Card.Title>\n                            </Card.Header>\n                            <Card.Body className=\"text-center\">\n\n                                <ListPickupAdmin getData={this.getData}/>\n                            </Card.Body>\n                        </Card>\n                    </Col> */}\n                     {/* <Col md={12}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title as=\"h5\">Line Chart Logistics</Card.Title>\n                            </Card.Header>\n                            <Card.Body className=\"text-center\">\n                                <LineChartLogistics/>\n                            </Card.Body>\n                        </Card>\n                    </Col> */}\n\n\n                </Row>\n            </Aux>\n        );\n    }\n}\n\nexport default Statistic_provider;"],"names":["urlbackend","require","props","useState","selectedDriver","setSelectedDriver","totalAnomaly","getDeliveryByDriverList","setDeliveryByDriverListt","totalDelivery","totalEnlevement","totalAnomalyConsole","startDate","setStartDate","endDate","setEndDate","drivers","setdrivers","getdatabyriver","alert","axios","then","response","data","console","log","catch","e","useEffect","getdata","config","headers","localStorage","getItem","getdrivers","Row","Col","sm","style","marginBottom","color","Form","controlId","type","name","placeholder","value","onChange","target","className","marginRight","marginLeft","width","height","map","key","id","username","class","onClick","Tabs","defaultActiveKey","marginTop","Tab","eventKey","title","fontSize","pickup","delivery","Statistic_provider","getData","setState","state","getList","selectedProduct","isloaded","limit","offset","perPage","orgtableData","currentPage","Card","as","this","React"],"sourceRoot":""}