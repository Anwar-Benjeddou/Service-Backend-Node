{"version":3,"file":"static/js/9523.b07b7f2c.chunk.js","mappings":"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","sources":["Components/Alert/Alert.js","Components/CustomInput.js","Components/InputStatus.js","Routes/Settings/providersettings/Add.Provider.js","../node_modules/react-bootstrap/esm/CardContext.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["\nimport React,{ useState,useEffect } from 'react';\nimport {Alert } from 'reactstrap'\nexport default  function AlertDismissibleExample(props) {\n    const [show, setShow] = useState(props.showit);\n    const onDismiss = () => setShow(false);\n    useEffect( () => {\n      console.log(\"show message Modal value:\",show);\n  }, [show]);  \n    // if (show) {\n    //   return (\n    //     <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n    //       {/* <Alert.Heading>Oh snap! You got an error!</Alert.Heading> */}\n    //       {/* <Alert.Heading>{props.message}</Alert.Heading> */}\n    //       <p>\n    //        {props.message}\n    //       </p>\n    //     </Alert>\n    //   );\n    // }\n    // return <Button onClick={() => setShow(true)}>Show Alert</Button>;\n    return (\n      <Alert color={props.design} isOpen={show} toggle={onDismiss}>\n        <p>\n           {props.message}\n        </p>\n      </Alert>\n    );\n  }","import React from 'react';\nimport { InputGroup, FormControl} from 'react-bootstrap';\nimport InputStatus from './InputStatus';\n\nconst CustomInput = ({ name,label, onChange , onBlur, value,type, isInvalid, errors,touched\n  \n}) => {\n  \n    \n  return (\n   <>\n   {\n       label === 'Phone' ? (\n        <>   \n        <label htmlFor=\"basic-url\">{name} <InputStatus errors={errors} touched={touched}/></label>\n        \n       <InputGroup className=\"mb-3\">\n       <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">+216</InputGroup.Text>\n        </InputGroup.Prepend>\n           <FormControl\n               placeholder={label}\n               aria-label={name}\n               aria-describedby={name}\n               onChange={onChange}\n               onBlur={onBlur}\n               value={value}\n               isInvalid={isInvalid}\n               label={label}\n               name={name}\n               type={type}\n   \n           />\n       </InputGroup>\n       </>\n        ):(\n            <>\n            \n            <label htmlFor=\"basic-url\">{label}  <InputStatus errors={errors} touched={touched}/></label>\n\n       <InputGroup className=\"mb-3\">\n   \n           <FormControl\n               placeholder={label}\n               aria-label={label}\n               aria-describedby={label}\n               onChange={onChange}\n               onBlur={onBlur}\n               value={value}\n               isInvalid={isInvalid}\n               label={label}\n               name={name}\n               type={type}\n\n               \n   \n           />\n       </InputGroup>\n       </>\n        )\n      \n   }\n    \n    </>  \n   \n  );\n};\nexport default CustomInput;","import React from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport '../assets/scss/index.scss';\nimport i18n from './../i18n';\n\nconst getConfig = (errors, touched) => {\n  if (!touched) {\n    return [];\n  }\n\n  \n\n  if (errors && touched) {\n    return ['fa-times-circle-o input-invalid', errors];\n  }\n\n  if (!errors && touched) {\n    return ['fa-check-circle-o input-valid', i18n.t('valid-field')];\n  }\n};\n\nconst InputStatus = ({ errors, touched }) => {\n  const [classes, extra] = getConfig(errors, touched);\n  \n  return (\n    <Tooltip\n      title={\n        !Array.isArray(extra) ? (\n          <span className=\"tooltip-message\">\n            {extra} <br />\n          </span>\n        ) : (\n          extra.map(e => (\n            <span className=\"tooltip-message\">\n              {e} <br />\n            </span>\n          ))\n        )\n      }\n      placement=\"right\">\n      <span>\n        <i className={'fa ' + classes} />\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default InputStatus;","import React from \"react\";\nimport {\n    Row,\n    Col,\n    Card,\n    InputGroup,\n    FormControl,\n    Button,\n} from \"react-bootstrap\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Aux from \"../../../hoc/_Aux\";\nimport CustomInput from \"../../../Components/CustomInput\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport MessageModal from \"./../../../Components/Alert/Alert\";\n\nimport i18n from './../../../i18n';\n\nconst columnsss = [{\n    dataField: 'article',\n    text: i18n.t('article')\n}, {\n    dataField: 'code',\n    text:  i18n.t('code')\n}, {\n    dataField: 'priceInitial',\n    text: i18n.t('initial-price')\n},\n{\n    dataField: 'poidsInitial',\n    text:  i18n.t('initial-weight')\n},\n{\n    dataField: 'poidsSupplimentaire',\n    text:  i18n.t('additional-weight')\n}\n\n];\nvar urlbackend = require(\"../../../env/env\")();\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nconst SignupSchema = Yup.object().shape({\n    email: Yup.string().email(i18n.t('error-email')).required(i18n.t('error-required-email')),\n    phone_number: Yup.string()\n        .matches(phoneRegExp,i18n.t('error-phone-number'))\n        .required(i18n.t('error-required-phone-number')),\n        firstname: Yup.string()\n        .min(2, i18n.t('error-short-first-name'))\n        .required(i18n.t('error-required-first-name')),\n    lastname: Yup.string()\n        .min(2,i18n.t('error-short-last-name'))\n        .required(i18n.t('error-required-last-name')),\n    address: Yup.string()\n        .required(i18n.t('error-address')),\n    username: Yup.string()\n        .required(i18n.t('error-username')),\n    password: Yup.string()\n        .required(i18n.t('error-password')),\n    company: Yup.string()\n        .required(i18n.t('error-company')),\n    code_fiscal: Yup.string()\n        .required(i18n.t('error-code-fiscal')),\n});\nclass AddProvider extends React.Component {\n    state = {\n\n        privileges: [],\n        permissions: [],\n        agences: [],\n        permissionss: [],\n        articles: [],\n        showMessageParams:{\n            display:false,\n            type:\"success\",\n            message:null\n            \n        },\n\n    };\n    handleChange = (event) => {\n        console.log(event.target.value);\n        this.setState({ permissionss: [...this.state.permissionss, event.target.value] })\n    };\n    componentDidMount() {\n        // axios.get(urlbase+\"/privilege/list\").then(response=>{\n\n\n        //   console.log(response.data)\n        // })\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Headers': 'Authorization',\n                \"x-access-token\": localStorage.getItem('token'),\n                'Authorization': 'Bearer ' + localStorage.getItem('token'),\n            },\n        };\n\n        var getprivileges = axios.get(urlbackend + \"/privileges\", config)\n        var getagence = axios.get(urlbackend + \"/agence\", config)\n        var getpermissions = axios.get(urlbackend + \"/permissions\", config)\n        var getarticles = axios.get(urlbackend + \"/articles\", config)\n\n\n        axios\n            .all([getprivileges, getagence, getpermissions, getarticles])\n            .then(\n                axios.spread((...response) => {\n                    console.log(\"this respon list0\", response[2].data)\n                    console.log(\"this respon list1\", response[1].data)\n                    this.setState({ privileges: response[0].data.data })\n                    this.setState({ agences: response[1].data.data })\n                    this.setState({ permissions: response[2].data.data })\n                    response[3].data.data.map(e=>{\n                        return  this.setState({ articles: [...this.state.articles , { id:e.id,code:e.code,article:e.article,priceInitial:0,poidsInitial:0,poidsSupplimentaire:0} ] })\n                       \n                    })\n\n\n                })\n            )\n            .catch(errors => {\n                // react on errors.\n                console.error(errors);\n            });\n\n    }\n\n    handlSubmit = (values) => {\n        this.setState({ \n            showMessageParams:{\n                display:false,\n                type:\"success\",\n                message:null\n                \n            }\n        });\n        console.log(this.state.articles)\n         values.permissions = this.state.permissionss\n        //  values.articles = this.state.articles.map((e=>{\n        //      return [...values.articles,{id:e.id,priceInitial:e.priceInitial,poidsInitial:e.poidsInitial,poidsSupplimentaire:e.poidsSupplimentaire}]\n        //  }))\n         this.state.articles.forEach(e => {\n             values.articles.push({id:e.id,priceInitial:e.priceInitial,poidsInitial:e.poidsInitial,poidsSupplimentaire:e.poidsSupplimentaire})\n         });\n        console.log(values);\n\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Headers': 'Authorization',\n                \"x-access-token\": localStorage.getItem('token'),\n                'Authorization': 'Bearer ' + localStorage.getItem('token'),\n            },\n        };\n\n        axios.post(urlbackend + \"/addProvider\", values, config)\n            .then(response => {\n                // alert(\"add Succefull\")\n                console.log(response.data)\n                //window.location.href = \"/datta-able/react/default/dashboard/default\"\n                this.props.history.push(\"/List/provider\");\n                this.setState({ \n                    showMessageParams:{\n                        display:true,\n                        type:\"success\",\n                        message:i18n.t('success-add-provider')\n                    }\n                });\n\n            })\n            .catch(e => {\n                console.log(e)\n                this.setState({ \n                    showMessageParams:{\n                        display:true,\n                        type:\"danger\",\n                        message:i18n.t('error-add-provider')\n                    }\n                });\n            })\n    };\n    showForm = ({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n        handleBlur,\n        setFieldValue,\n        isSubmitting,\n        dirty,\n        isValid,\n        handleReset,\n    }) => {\n        // console.log(errors);\n        const {showMessageParams } = this.state;\n\n        return (\n            <Aux>\n                <Row>\n                    <Col>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title as=\"h5\">{i18n.t('add-provider')}</Card.Title>\n                            </Card.Header>\n                            <Card.Body>\n                            {showMessageParams.display==true ?\n                            <MessageModal message={showMessageParams.message} design={showMessageParams.type} showit={showMessageParams.display} />\n                            :null\n                            }\n\n                                <Row>\n                                    <Col md={6}>\n                                        <CustomInput\n                                            name=\"firstname\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.firstname}\n                                            errors={errors.firstname}\n                                            touched={touched.firstname}\n                                            label={i18n.t('first-name')}\n                                        />\n\n                                        <CustomInput\n                                            name=\"lastname\"\n                                            label={i18n.t('last-name')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.lastname}\n                                            errors={errors.lastname}\n                                            touched={touched.lastname}\n                                        />\n                                        <CustomInput\n                                            name=\"username\"\n                                            label={i18n.t('username')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.username}\n                                            errors={errors.username}\n                                            touched={touched.username}\n                                        />\n\n                                        <CustomInput\n                                            name=\"password\"\n                                            label={i18n.t('password')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.password}\n                                            errors={errors.password}\n                                            touched={touched.password}\n                                            type=\"password\"\n                                        />\n                                        <CustomInput\n                                            name=\"email\"\n                                            label={i18n.t('email')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.email}\n                                            errors={errors.email}\n                                            touched={touched.email}\n                                        />\n                                        <CustomInput\n                                            name=\"company\"\n                                            label={i18n.t('company')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.company}\n                                            errors={errors.company}\n                                            touched={touched.company}\n                                        />\n\n                                        <div>\n\n                                            {this.state.permissions.map((e) => (\n                                                <div key={e.id}>\n                                                    <Checkbox\n                                                        onChange={(e) => this.handleChange(e)}\n                                                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                                                        value={e.id}\n                                                        key={e.id}\n                                                    />  {e.name}\n                                                </div>\n                                            ))}\n\n                                        </div>\n\n                                    </Col>\n                                    <Col md={6}>\n                                        <CustomInput\n                                            name=\"phone_number\"\n                                            label={i18n.t('phone-number')}\n                                            // type=\"number\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.phone_number}\n                                            errors={errors.phone_number}\n                                            touched={touched.phone_number}\n                                        />\n                                        <CustomInput\n                                            name=\"address\"\n                                            label={i18n.t('address')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.address}\n                                            errors={errors.address}\n                                            touched={touched.address}\n                                        />\n\n\n\n                                        <label htmlFor=\"basic-url\">{i18n.t('privilege')}</label>\n\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                as=\"select\"\n                                                id=\"privilege\"\n                                                custom\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.Formateur}\n                                            >\n                                                <option>{i18n.t('choose-privilege')}</option>\n\n                                                {this.state.privileges.map((privilege, index) => (\n                                                    <option key={privilege.id} value={privilege.id}>\n                                                        {privilege.name} : {privilege.description}\n                                                    </option>\n                                                ))}\n                                            </FormControl>\n                                        </InputGroup>\n\n\n                                        <label htmlFor=\"basic-url\">{i18n.t('agency')}</label>\n\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                as=\"select\"\n                                                id=\"agence\"\n                                                custom\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.Formateur}\n                                            >\n                                                <option>{i18n.t('choose-agency')}</option>\n\n                                                {this.state.agences.map((agence, index) => (\n                                                    <option key={agence.id} value={agence.id}>\n                                                        {agence.name} : {agence.address}\n                                                    </option>\n                                                ))}\n                                            </FormControl>\n                                        </InputGroup>\n                                        <CustomInput\n                                            name=\"code_fiscal\"\n                                            label={i18n.t('code-fiscal')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.code_fiscal}\n                                            errors={errors.code_fiscal}\n                                            touched={touched.code_fiscal}\n                                        />\n                                        {/* <CustomInput\n                                            name=\"code_postal\"\n                                            label=\"code postal\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.code_postal}\n                                            errors={errors.code_postal}\n                                            touched={touched.code_postal}\n                                        /> */}\n                                        \n\n\n                                    </Col>\n                                </Row>\n\n                                <BootstrapTable\n                                    keyField=\"article\"\n                                    data={this.state.articles}\n                                    columns={columnsss}\n                                    cellEdit={cellEditFactory({ mode: 'click' })}\n                                />\n                                <Button\n                                disabled={Object.keys(errors).length>0}\n                                    onClick={() => {\n                                        this.handlSubmit(values);\n                                        // handleReset();\n                                        // console.log(values);\n                                    }}\n                                >\n                                    {i18n.t('save')}\n                </Button>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Aux>\n        );\n    };\n\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    firstname: \"\",\n                    lastname: \"\",\n                    username: \"\",\n                    password: \"\",\n                    email: \"\",\n                    phone_number: \"\",\n                    address: \"\",\n                    descriminator: \"provider\",\n                    company: \"\",\n                    code_fiscal: \"\",\n                    code_postal: \"\",\n                    articles:[]\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    this.submitForm(values);\n                    setSubmitting(false);\n                }}\n                validationSchema={SignupSchema}\n            >\n                {(props) => this.showForm(props)}\n            </Formik>\n        );\n    }\n}\n\nexport default AddProvider;\n","import React from 'react';\nvar context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardContext';\nexport default context;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classNames from 'classnames';\nexport default (function (className) {\n  return /*#__PURE__*/React.forwardRef(function (p, ref) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, p, {\n      ref: ref,\n      className: classNames(p.className, className)\n    }));\n  });\n});"],"names":["AlertDismissibleExample","props","useState","showit","show","setShow","useEffect","console","log","color","design","isOpen","toggle","message","name","label","onChange","onBlur","value","type","isInvalid","errors","touched","htmlFor","className","id","placeholder","i18n","getConfig","classes","extra","Tooltip","title","Array","isArray","map","e","placement","columnsss","dataField","text","urlbackend","require","SignupSchema","Yup","shape","email","required","phone_number","matches","firstname","min","lastname","address","username","password","company","code_fiscal","AddProvider","state","privileges","permissions","agences","permissionss","articles","showMessageParams","display","handleChange","event","target","setState","handlSubmit","values","forEach","push","priceInitial","poidsInitial","poidsSupplimentaire","config","headers","localStorage","getItem","axios","then","response","data","history","catch","showForm","handleBlur","handleSubmit","setFieldValue","isSubmitting","dirty","isValid","handleReset","as","md","inputProps","custom","Formateur","privilege","index","description","agence","keyField","columns","cellEdit","cellEditFactory","mode","disabled","Object","keys","length","onClick","getprivileges","getagence","getpermissions","getarticles","code","article","error","initialValues","descriminator","code_postal","onSubmit","setSubmitting","submitForm","validationSchema","React","context","displayName","p","ref","_extends","classNames"],"sourceRoot":""}