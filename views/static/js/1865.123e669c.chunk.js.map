{"version":3,"file":"static/js/1865.123e669c.chunk.js","mappings":"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","sources":["Components/Alert/Alert.js","Components/CustomInput.js","Components/InputStatus.js","Routes/Settings/adminsettings/Add.admin.js","../node_modules/classnames/index.js","../node_modules/react-bootstrap/esm/CardContext.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["\nimport React,{ useState,useEffect } from 'react';\nimport {Alert } from 'reactstrap'\nexport default  function AlertDismissibleExample(props) {\n    const [show, setShow] = useState(props.showit);\n    const onDismiss = () => setShow(false);\n    useEffect( () => {\n      console.log(\"show message Modal value:\",show);\n  }, [show]);  \n    // if (show) {\n    //   return (\n    //     <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n    //       {/* <Alert.Heading>Oh snap! You got an error!</Alert.Heading> */}\n    //       {/* <Alert.Heading>{props.message}</Alert.Heading> */}\n    //       <p>\n    //        {props.message}\n    //       </p>\n    //     </Alert>\n    //   );\n    // }\n    // return <Button onClick={() => setShow(true)}>Show Alert</Button>;\n    return (\n      <Alert color={props.design} isOpen={show} toggle={onDismiss}>\n        <p>\n           {props.message}\n        </p>\n      </Alert>\n    );\n  }","import React from 'react';\nimport { InputGroup, FormControl} from 'react-bootstrap';\nimport InputStatus from './InputStatus';\n\nconst CustomInput = ({ name,label, onChange , onBlur, value,type, isInvalid, errors,touched\n  \n}) => {\n  \n    \n  return (\n   <>\n   {\n       label === 'Phone' ? (\n        <>   \n        <label htmlFor=\"basic-url\">{name} <InputStatus errors={errors} touched={touched}/></label>\n        \n       <InputGroup className=\"mb-3\">\n       <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">+216</InputGroup.Text>\n        </InputGroup.Prepend>\n           <FormControl\n               placeholder={label}\n               aria-label={name}\n               aria-describedby={name}\n               onChange={onChange}\n               onBlur={onBlur}\n               value={value}\n               isInvalid={isInvalid}\n               label={label}\n               name={name}\n               type={type}\n   \n           />\n       </InputGroup>\n       </>\n        ):(\n            <>\n            \n            <label htmlFor=\"basic-url\">{label}  <InputStatus errors={errors} touched={touched}/></label>\n\n       <InputGroup className=\"mb-3\">\n   \n           <FormControl\n               placeholder={label}\n               aria-label={label}\n               aria-describedby={label}\n               onChange={onChange}\n               onBlur={onBlur}\n               value={value}\n               isInvalid={isInvalid}\n               label={label}\n               name={name}\n               type={type}\n\n               \n   \n           />\n       </InputGroup>\n       </>\n        )\n      \n   }\n    \n    </>  \n   \n  );\n};\nexport default CustomInput;","import React from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport '../assets/scss/index.scss';\nimport i18n from './../i18n';\n\nconst getConfig = (errors, touched) => {\n  if (!touched) {\n    return [];\n  }\n\n  \n\n  if (errors && touched) {\n    return ['fa-times-circle-o input-invalid', errors];\n  }\n\n  if (!errors && touched) {\n    return ['fa-check-circle-o input-valid', i18n.t('valid-field')];\n  }\n};\n\nconst InputStatus = ({ errors, touched }) => {\n  const [classes, extra] = getConfig(errors, touched);\n  \n  return (\n    <Tooltip\n      title={\n        !Array.isArray(extra) ? (\n          <span className=\"tooltip-message\">\n            {extra} <br />\n          </span>\n        ) : (\n          extra.map(e => (\n            <span className=\"tooltip-message\">\n              {e} <br />\n            </span>\n          ))\n        )\n      }\n      placement=\"right\">\n      <span>\n        <i className={'fa ' + classes} />\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default InputStatus;","import React from \"react\";\nimport {\n    Row,\n    Col,\n    Card,\n    InputGroup,\n    FormControl,\n    Button,\n} from \"react-bootstrap\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Aux from \"../../../hoc/_Aux\";\nimport CustomInput from \"../../../Components/CustomInput\";\nimport MessageModal from \"./../../../Components/Alert/Alert\";\n\nimport i18n from './../../../i18n';\n\nvar urlbackend = require(\"../../../env/env\")();\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nconst SignupSchema = Yup.object().shape({\n    email: Yup.string().email(i18n.t('error-email')).required(i18n.t('error-required-email')),\n    phone_number: Yup.string()\n        .matches(phoneRegExp,i18n.t('error-phone-number'))\n        .required(i18n.t('error-required-phone-number')),\n    city: Yup.string()\n        .min(2, \"City is Too Short!\")\n        .max(20, \"City is Too Long!\")\n        .required(\"City is Required\"),\n    country: Yup.string()\n        .min(2, \"Country is Too Short!\")\n        .max(20, \"Country is Too Long!\")\n        .required(\"Country is Required\"),\n    firstname: Yup.string()\n        .min(2, i18n.t('error-short-first-name'))\n        .max(20,i18n.t('error-long-first-name'))\n        .required(i18n.t('error-required-first-name')),\n    lastname: Yup.string()\n        .min(2,i18n.t('error-short-last-name'))\n        .max(20,i18n.t('error-long-last-name'))\n        .required(i18n.t('error-required-last-name')),\n    address: Yup.string()\n        .required(i18n.t('error-address')),\n    username: Yup.string()\n        .required(i18n.t('error-username')),\n    password: Yup.string()\n        .required(i18n.t('error-password')),\n});\nclass AddAdmin extends React.Component  {\n    state = {\n\n        privileges: [],\n        permissions: [],\n        agences: [],\n        permissionss:[],\n        showMessageParams:{\n            display:false,\n            type:\"success\",\n            message:null,                \n        },\n\n    };\n    handleChange = (event) => {\n        console.log(event.target.value);\n        this.setState({ permissionss: [...this.state.permissionss, event.target.value]})\n    };\n    componentDidMount() {\n        // axios.get(urlbase+\"/privilege/list\").then(response=>{\n\n\n        //   console.log(response.data)\n        // })\n        const config = {\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Headers': 'Authorization',\n              \"x-access-token\": localStorage.getItem('token'),\n              'Authorization': 'Bearer '+localStorage.getItem('token'),\n            },\n          };\n\n        var getprivileges = axios.get(urlbackend + \"/privileges\", config)\n        var getagence = axios.get(urlbackend + \"/agence\", config)\n        var getpermissions = axios.get(urlbackend + \"/permissions\", config)\n\n\n        axios\n            .all([getprivileges, getagence, getpermissions])\n            .then(\n                axios.spread((...response) => {\n                    console.log(\"this respon list0\", response[2].data)\n                    console.log(\"this respon list1\", response[1].data)\n                    this.setState({ privileges: response[0].data.data })\n                    this.setState({ agences: response[1].data.data })\n                    this.setState({ permissions: response[2].data.data })\n\n\n                })\n            )\n            .catch(errors => {\n                // react on errors.\n                console.error(errors);\n            });\n\n    }\n\n    handlSubmit = (values) => {\n        values.permissions = this.state.permissionss\n        console.log(values);\n\n       \n        const config = {\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Headers': 'Authorization',\n              \"x-access-token\": localStorage.getItem('token'),\n              'Authorization': 'Bearer '+localStorage.getItem('token'),\n            },\n          };\n\n        axios.post(urlbackend + \"/addUser/admin\", values, config)\n            .then(response => {\n                this.setState({ \n                    showMessageParams:{\n                        display:true,\n                        type:\"success\",\n                        message:i18n.t('success-add-admin')\n                    }\n                });\n                this.setState({ \n                    showMessageParams:{\n                        display:false,\n                        type:\"success\",\n                        message:null\n                        \n                    }\n                });\n              //  window.location.href= \"/datta-able/react/default/dashboard/default\"\n\n\n            })\n            .catch(e => {\n                this.setState({ \n                    showMessageParams:{\n                        display:true,\n                        type:\"danger\",\n                        message:i18n.t('error-add-admin')\n                    }\n                });\n                console.log(e)\n            })\n    };\n    showForm = ({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n        handleBlur,\n        setFieldValue,\n        isSubmitting,\n        dirty,\n        isValid,\n        handleReset,\n    }) => {\n        const { showMessageParams } = this.state;\n        // console.log(errors);\n        return (\n            <Aux>\n                <Row>\n                    <Col>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title as=\"h5\">{i18n.t('add-admin')}</Card.Title>\n                            </Card.Header>\n                                 {showMessageParams.display==true ?\n                                <MessageModal message={showMessageParams.message} design={showMessageParams.type} showit={showMessageParams.display} />\n                                :null\n                                }\n                            <Card.Body>\n                                <Row>\n                                    <Col md={6}>\n                                        <CustomInput\n                                            name=\"firstname\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.firstname}\n                                            errors={errors.firstname}\n                                            touched={touched.firstname}\n                                            label={i18n.t('first-name')}\n                                        />\n\n                                        <CustomInput\n                                            name=\"lastname\"\n                                            label={i18n.t('last-name')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.lastname}\n                                            errors={errors.lastname}\n                                            touched={touched.lastname}\n                                        />\n                                        <CustomInput\n                                            name=\"username\"\n                                            label={i18n.t('username')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.username}\n                                            errors={errors.username}\n                                            touched={touched.username}\n                                        />\n\n                                        <CustomInput\n                                            name=\"password\"\n                                            label={i18n.t('password')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.password}\n                                            errors={errors.password}\n                                            touched={touched.password}\n                                            type=\"password\"\n                                        />\n                                        <CustomInput\n                                            name=\"email\"\n                                            label={i18n.t('email')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.email}\n                                            errors={errors.email}\n                                            touched={touched.email}\n                                        />\n\n                                        <div>\n\n                                            {this.state.permissions.map((e) => (\n                                                <div>\n                                                    <Checkbox\n                                                        onChange={(e) => this.handleChange(e)}\n                                                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                                                        value={e.id}\n                                                        key={e.id}\n                                                    />  {e.name} \n                                                </div>\n                                            ))}\n\n                                        </div>\n\n                                    </Col>\n                                    <Col md={6}>\n                                        <CustomInput\n                                            name=\"phone_number\"\n                                            label={i18n.t('phone-number')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.phone_number}\n                                            errors={errors.phone_number}\n                                            touched={touched.phone_number}\n                                        />\n                                        <CustomInput\n                                            name=\"address\"\n                                            label={i18n.t('address')}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.address}\n                                            errors={errors.address}\n                                            touched={touched.address}\n                                        />\n                                        <label htmlFor=\"basic-url\">{i18n.t('descriminator')}</label>\n\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                as=\"select\"\n                                                id=\"descriminator\"\n                                                custom\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.Formateur}\n                                            >\n                                                <option>{i18n.t('choose-descriminator')}</option>\n\n                                                {[\n                                                    `regular_user`,\n                                                    `magasinier`,\n                                                    `comptable`\n                                                ].map((descriminator, index) => (\n                                                    <option key={descriminator} value={descriminator}>\n                                                        {descriminator}\n                                                    </option>\n                                                ))}\n                                            </FormControl>\n                                        </InputGroup>\n\n\n                                        <label htmlFor=\"basic-url\">{i18n.t('privilege')}</label>\n\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                as=\"select\"\n                                                id=\"privilege\"\n                                                custom\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.Formateur}\n                                            >\n                                                <option>{i18n.t('choose-privilege')}</option>\n\n                                                {this.state.privileges.map((privilege, index) => (\n                                                    <option key={privilege.id} value={privilege.id}>\n                                                        {privilege.name} :{privilege.description}\n                                                    </option>\n                                                ))}\n                                            </FormControl>\n                                        </InputGroup>\n\n\n                                        <label htmlFor=\"basic-url\">{i18n.t('agency')}</label>\n\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                as=\"select\"\n                                                id=\"agence\"\n                                                custom\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.Formateur}\n                                            >\n                                                <option>{i18n.t('choose-agency')}</option>\n\n                                                {this.state.agences.map((agence, index) => (\n                                                    <option key={agence.id} value={agence.id}>\n                                                        {agence.name} :{agence.address}\n                                                    </option>\n                                                ))}\n                                            </FormControl>\n                                        </InputGroup>\n\n\n                                    </Col>\n                                </Row>\n\n\n                                <Button\n                                    onClick={() => {\n                                        this.handlSubmit(values);\n                                        handleReset();\n                                        // console.log(values);\n                                    }}\n                                >\n                                    {i18n.t('save')}\n                </Button>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Aux>\n        );\n    };\n\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    firstname: \"\",\n                    lastname: \"\",\n                    username: \"\",\n                    password: \"\",\n                    email: \"\",\n                    phone_number: \"\",\n                    address: \"\",\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    this.submitForm(values);\n                    setSubmitting(false);\n                }}\n                validationSchema={SignupSchema}\n            >\n                {(props) => this.showForm(props)}\n            </Formik>\n        );\n    }\n}\n\nexport default AddAdmin;\n","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\nvar context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardContext';\nexport default context;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classNames from 'classnames';\nexport default (function (className) {\n  return /*#__PURE__*/React.forwardRef(function (p, ref) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, p, {\n      ref: ref,\n      className: classNames(p.className, className)\n    }));\n  });\n});"],"names":["AlertDismissibleExample","props","useState","showit","show","setShow","useEffect","console","log","color","design","isOpen","toggle","message","name","label","onChange","onBlur","value","type","isInvalid","errors","touched","htmlFor","className","id","placeholder","i18n","getConfig","classes","extra","Tooltip","title","Array","isArray","map","e","placement","urlbackend","require","SignupSchema","Yup","shape","email","required","phone_number","matches","city","min","max","country","firstname","lastname","address","username","password","AddAdmin","state","privileges","permissions","agences","permissionss","showMessageParams","display","handleChange","event","target","setState","handlSubmit","values","config","headers","localStorage","getItem","axios","then","response","catch","showForm","handleBlur","handleSubmit","handleReset","setFieldValue","isSubmitting","dirty","isValid","as","md","inputProps","custom","Formateur","descriminator","index","privilege","description","agence","onClick","getprivileges","getagence","getpermissions","data","error","initialValues","onSubmit","setSubmitting","submitForm","validationSchema","React","hasOwn","hasOwnProperty","classNames","i","arguments","length","arg","argType","push","apply","key","call","join","module","exports","context","displayName","p","ref","_extends"],"sourceRoot":""}